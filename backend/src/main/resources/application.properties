# Server Configuration
server.port=8080
server.servlet.context-path=/

# File Upload Configuration
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# Logging Configuration
logging.level.org.eightfoldconsulting.nimas2pdf=DEBUG
logging.level.org.springframework.web=DEBUG

# File Storage Paths
app.upload.dir=uploads
app.output.dir=outputs

# Conversion Settings
app.conversion.timeout=300000
app.conversion.max-concurrent=5

# Note: Conversion properties are now stored per NIMAS package in the database
# Default values are defined in ConversionProperties.java

# CORS Configuration
app.cors.allowed-origins=http://localhost:3000,http://localhost:3001
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*

# Database Configuration
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# JPA Configuration
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.defer-datasource-initialization=true

# H2 Console (for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# OAuth2 Configuration
# Google OAuth2 (requires client credentials)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# GitHub OAuth2 (requires client credentials)
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:your-github-client-id}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:your-github-client-secret}
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# Microsoft/Azure OAuth2 (requires client credentials)
spring.security.oauth2.client.registration.microsoft.client-id=${MICROSOFT_CLIENT_ID:your-microsoft-client-id}
spring.security.oauth2.client.registration.microsoft.client-secret=${MICROSOFT_CLIENT_SECRET:your-microsoft-client-secret}
spring.security.oauth2.client.registration.microsoft.scope=openid,profile,email
spring.security.oauth2.client.registration.microsoft.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.microsoft.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.microsoft.client-name=Microsoft

# Microsoft provider configuration
spring.security.oauth2.client.provider.microsoft.authorization-uri=https://login.microsoftonline.com/common/oauth2/v2.0/authorize
spring.security.oauth2.client.provider.microsoft.token-uri=https://login.microsoftonline.com/common/oauth2/v2.0/token
spring.security.oauth2.client.provider.microsoft.user-info-uri=https://graph.microsoft.com/v1.0/me
spring.security.oauth2.client.provider.microsoft.user-name-attribute=id

# Session Configuration
server.servlet.session.cookie.same-site=lax
server.servlet.session.cookie.secure=false
server.servlet.session.timeout=30m

# Security Configuration
logging.level.org.springframework.security=DEBUG
